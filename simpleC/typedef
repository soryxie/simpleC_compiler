block_comment /(\*)(.|\n)*\*/
line_comment //.*
space \s
open_par \( (
close_par \) )
semicolon ; ;
comma , ,
open_curly_brace \{ {
close_curly_brace \} }
open_brace \[ [
close_brace \] ]
double_constant \b(-?)(0|([1-9][0-9]*))\.([0-9]+)?\b double_const
long_constant \b(-?)(0|[1-9]\d*)(l|L)\b long_const
int_constant (-?)(0|[1-9]\d*) int_const
plusplus \+\+ ++
minusminus \-\- --
self_plus \+= +=
plus \+{1} +
self_minus \-= -=
minus \-{1} -
int \bint\b int
double \bdouble\b double
float \bfloat\b float
bool \bbool\b bool
char \bchar\b char
long \blong\b long
short \bshort\b short
new \bnew\b new
void \bvoid\b void
null \bnull\b null
return \breturn\b return
if \bif\b if
else \belse\b else
do \bdo\b do
while \bwhile\b while
for \bfor\b for
false \bfalse\b false
true \btrue\b true
switch \bswitch\b switch
break \bbreak\b break
continue \bcontinue\b continue
static \bstatic\b static
dot \. .
pow \*\* **
self_multiply \*= *=
multiply \*{1} *
self_divide /= /=
divide /{1} /
self_modulo %= %=
modulo % %
equal == == 
assignment = =
self_left_shift <<= <<=
left_shift << <<
lower_equal <= <=
lower_than < <
self_right_shift >>= >>=
right_shift >> >>
higher_equal >= >=
higher_than > >
not_equal != !=
or \bor\b or
bitwise_or \| \|
and \band\b and
not \bnot\b not
bitwise_and & &
bitwise_xor \^ ^
bitwise_not ! !
sharp # #
identifier \b([a-zA-Z]|\_)([a-zA-Z]|[0-9]|\_){0,32}\b id
string_literal \"([^\"\n])*\" str_literal
char_literal \'[^\']{1}\' char_literal